/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-17 06:20:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp._0417_005fJSP_005f프로그래밍;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class J01_005f쿠키설정_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("  <title>쿠키설정</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    body{\r\n");
      out.write("      text-align: center;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <h1>쿠키 설정 하기</h1>\r\n");
      out.write("  ");

      // 1. 쿠키 설정(생성)하기
      // Cookie newCookie = new Cookie("키(key)", "값(value)");
      Cookie newCookie = new Cookie("sungmin_cookie1", "첫번째쿠키값입니다");
      response.addCookie(newCookie);  // 쿠키 추가

      Cookie newCookie2 = new Cookie("sungmin_cookie2", "두번째쿠키값입니다");
      newCookie2.setPath("/");  //path=/
      response.addCookie(newCookie2); // 쿠키 추가

      Cookie newCookie3 = new Cookie("sungmin_cookie3", "세번째쿠키값입니다");
      newCookie3.setPath("/");
      response.addCookie(newCookie3);

      Cookie newCookie4 = new Cookie("sungmin_cookie4", "네번째쿠키값입니다");
      newCookie4.setPath("/");
      //newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 1시간
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 2시간
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 3시간
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 10시간
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 * 2
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 * 3
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 * 7
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 * 10
      // newCookie4.setMaxage()     // 만료일(Expires Maxage) 60초 * 60분 * 24시간 * 30
      // newCookie4.setMaxAge(60*60*24);
      newCookie4.setMaxAge(60*60*1);
      response.addCookie(newCookie4);


  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
