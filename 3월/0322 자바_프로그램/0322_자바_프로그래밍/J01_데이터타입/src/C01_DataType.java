public class C01_DataType {
    public static void main(String[] args) {
        // 데이터 타입 
        // bit < 4bit(Nibble) < 8bit 1byte < 16Bit 2byte 
        // 변수에 타입 지정  논리형(Boolean 1bye)  바이트(1Byte )  문자(2Byte)  정수(Byte(1btye), short(2byte), int(4byte), long(8byte) )  실수  문자열
        
        //... 131072    65536   32768   16384    8192    4096    2048    1024    512    256   128   64     32     16      8      4     2       1
        //    (2^17)    (2^16)   (2^15) (2^14)   (2^13)  (2^12)  (2^11)  (2^10) (2^9)  (2^8)  (2^7)  (2^6)  (2^5)  (2^4)  (2^3)  (2^2)  (2^1)  (2^0)                                            

        // 표현범위 -(2n-1) ~ (2n-1)-1
        // 8bit 의 표현범위  -128 ~ 127
        // n=8
        // -2^8-1 ~ 2^8-1-1
        // -2^7 ~ 2^7-1
        // -128 ~ 127
        // 10진수 최대수(n-1 => 10-1=>  9) 0 1 2 3 4 5 6 7 8 9
        // 10진수 => 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50

        // 16 진수 
        // 표현범위 => 0 1 2 3 4 5 6 7 8 9 A(10) B(11) C(12) D(13) E(14) F(15)  => 2진수 4자리가 필요 1111
        // 16진수 최대수(n-1 => 16-1=> 15) 0 1 2 3 4 5 6 7 8 9 A(10) B(11) C(12) D(13) E(14) F(15)
        // 16진수 표현 => 0 1 2 3 4 5 6 7 8 9  A  B  C  D  E  F 10 11 12 13 14 15 16 17 18 19  1A  1B  1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29  2A  2B  2C  2D  2E  2F

        // 8 진수
        // 표현범위 => 0 1 2 3 4 5 6 7
        // 8진수 => 최대수(n-1 => 8-1 => 7)  => 2진수 3자리가 필요한다   111
        // 10진수 표현 => 0 1 2 3 4 5 6 7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25         
        // 8진수  표현 => 0 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 20 21 22 23 24 25 26 27 30 31

        // 4 진수
        // 표현범위 => 0 1 2 3
        // 4진수 => 최대수(n-1 => 4-1 => 3)  =>  2진수 2자리가 필요하다  11 
        // 10진수 표현 => 0 1 2 3  4  5  6  7  8  9 10 11 12 13 14 15  16  17  18  19  20  21  22  23  24  25         
        // 4진수  표현 => 0 1 2 3 10 11 12 13 20 21 22 23 30 31 32 33 100 101 102 103 110 111 112 113 120 121
 
        // 2진수
        // 전원 켠다 on(1), 끈다 off(0)
        // 전원스위치가 0개 이면 표현 방법 몇가지 일까요?  2^0 => 1가지 
        // 전원스위치가 1개(ON/OFF) 이면 표현 방법 몇가지 일까요? 2^1 => 2가지
        // 사람이 사용하는 10진수 중 가장 작은 수 0(Zero) 을 off 상태료 표현하고  그리고 1을  on 상태로 표현한다.
        // 그래서 2진수 가 탄생 
        // 2진수 최대수 n-1 => 2-1 => 1
        // 0 과 1 2진수 
        // 0 또는 1 1비트에 표현 숫자는 0 또는 1 이라고 표현한다. Bit   =>   Binary Term
        // 표현 
        // 10진수 표현 => 0 1 2 3  4  5  6  7  8  9 10 11 12 13 14 15  16  17  18  19  20  21  22  23  24  25         
        // 10진수   2진수
        //  0       0
        //  1       1
        //  2      10     
        //  3      11 
        //  4     100  
        //  5     101
        //  6     110
        //  7     111  
        //  8    1000 
        //  9    1001
        // 10    1010
        // 11    1011
        // 12    1100
        // 13    1101
        // 14    1110
        // 15    1111
        // 16   10000
        // 17   10001
        // 18   10010
        // 19   10011
        // 20   10100
        // 21   10101
        // :
        // 45  
        //...    65536   32768   16384    8192    4096    2048    1024    512    256   128     64    32     16      8      4     2       1    2^n (2의 n승 조견표)
        //      (2^16)   (2^15) (2^14)   (2^13)  (2^12)  (2^11)  (2^10) (2^9)  (2^8)  (2^7)  (2^6)  (2^5)  (2^4)  (2^3)  (2^2)  (2^1)  (2^0)
        //                                                                                            1      0      1      1     0       1    =      0010 1101
        //                                                                                           32      0      8      4     0       1    =  32+0+8+4+0+1=45

        // 예] 2진수  =>  4진수(3) => 2진수 2자리 [ 11 ]  21
        // 문제1]  0101 1101(2)
        //         21  21  21  21
        //         01  01  11  01 
        //        ===============
        //         1   1   3   1(4)
        // 문제2] 13(4)
        // - 4진수 자리를 1자리씩 나누어 쓴다. => 2진수

        //  21  21
        //  1    3
        // =======
        //  01  11

        // 문제3]   3213(4)
        // 21 21 21 21
        // 3   2  1  3
        //============
        // 11 10 01 11

        // 문제4]  1101 1101(2)
        // 21  21  21  21      
        // 11  01  11  01
        //================
        // 3   1   3   1
        // 3131(4)
    

        // 예] 2진수  =>  8진수(7) => 2진수 2자리 [ 111 ]  421
        // 문제1] 173(8) 
        //  421   421  421
        //   1     7    3
        // ================
        //  001   111  011
        //  00 111 1011(2)  

        // 문제2]  11011110101010(2)
        // 반드시 뒤에서 앞으로 3자리씩 갈라 놓는다.
        // 자리가 부족한 앞자리는 0으로 채운다.
        // 421 421 421 421 421
        // 011 011 110 101 010
        // ===================
        //  3   3   6   5   2
        // 33652(8)


        // 문제8]  7546(8)
        // 421   421   421  421
        //  7     5     4    6
        // ====================
        // 111   101  100  110 

        // 111 101 100 110(2)


        // 예] 2진수  =>  16진수(15) => 2진수 2자리 [ 1111 ]  8421
        // 문제1] 173A(16) 
        //  8421   8421  8421    8421
        //   1       7      3     A(10)
        // ==========================
        //  0001   0111  0011   1010
        //  0001 0111 0011 1010(2)

        // 문제2] CB89(16)
        // 8421  8421  8421  8421 
        // C(12) B(11)   8     9
        // ======================
        // 1100  1011  1000  1001
        // 1100 1011 1000 1001(2)

        // 예] 2진수  =>  10진수 => 2^n      16  8  4  2  1
        // 문제1]   126(10) => 2진수
        // 128  64  32  16  8   4   2  1 
        //  0    1   1   1  1   1   1  0       
        //      64+32+16+8+4+2 => 126(10)
        // 0111  1110(2)

        // 문제2]  1011011(2)
        // 64  32   16  8    4   2  1 
        // 1   0    1   1    0   1  1 
        // ==========================
        // 64 + 0 + 16+ 8+ 0 + 2 + 1
        // 91(10)
    }
}
